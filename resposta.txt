----- Perguntas da etapa 1 -----

De acordo com o código apresentado, identifique as fragilidades que podem ser

vistas como más práticas de programação ou violação de princípios de design. Além disso,
reflita sobre as seguintes questões:

- As categorias e seus respectivos valores estão hardcoded na classe Automovel, o que dificultará futuras mudanças.

- A classe Cliente está fazendo coisas demais (cálculos de renda/pontos de alugador e exibindo o extrato), se comportando como uma god class.

- As classes Automovel e Locacao estão servindo apenas para "segurar" dados, enquanto a classe Cliente realiza ações que poderiam ser delegadas a estas classes.

a) O sistema está pronto quando uma nova classificação de carro for adicionada?

R: Não, pois ao criar uma nova classificação, além de adicionar a nova constante na classe Automovel  também seria necessário ajustar a classe "Cliente", pois lá também há a lógica para calcular o valor do aluguel que será emitido no extrato do mesmo.

b) E quando houver reajuste de preço? O código está pronto para executar
facilmente um novo esquema de pontos de alugador frequente?
R: Não, pois como a lógica de pontos é hardcoded na classe Cliente, seria necessário alterar o código diretamente na classe (também hardcoded, visto que a lógica adotada não é flexível) para ajustar o esquema de pontos.

----- Perguntas da etapa 3 -----

- Mova o método valorDeUmaLocacao() para a classe Locacao. Essa mudança de código causou impacto na codificação de outras classes?

R: Sim, na classe Cliente, pois mesma utilizava valorDeUmaLocacao para calcular o valor e exibir o extrato. No entanto, após chamar valorDeUmaLocacao a partir de uma instância de Locacao, o código voltou a funcionar normalmente.

- De acordo com a pergunta acima, mova o bloco de código de cálculo do PAF para a classe que deve ter essa responsabilidade (que detém a informação para cálculo). Depois das mudanças, compile e rode o código novamente. A saída deve ser a mesma e a classe Locadora não deve ser afetada pelas mudanças. Reflita sobre como foi o impacto desta mudança no seu código, no geral.

R: Optei por realocar o método em questão para a classe Locacao, visto que a mesma possui uma instância de Automóvel, que é onde podemos verificar a categoria do veículo, e onde a própria Locacao possui a propriedade diasAlugados. Desse modo, a classe Cliente não é mais responsável por calcular o PAF, e sim a própria Locacao. Após fazer alguns ajustes (chamar o método valorPontosAlugador a partir de uma instância de Locacao), Locadora voltou a funcionar devidamente.

- A modificação foi simples? Reflita sobre como foi o impacto desta mudança no seu código.

R: Sim, a modificação foi simples, visto que boa parte do método já estava implementada, só tive que criar o método propriamente dito e fazer as chamadas corretamente. Sobre o impacto no código, claramente ficou mais fácil de lê-lo e de, caso necessário no futuro, sofrer alterações para receber novas funcionalidades.